// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.trovaparco.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Double
import kotlin.Float
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class ParkJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Park>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "description",
      "latitude", "longitude", "address", "facilities", "images", "opening_hours", "rating")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "latitude")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "facilities")

  private val floatAdapter: JsonAdapter<Float> = moshi.adapter(Float::class.java, emptySet(),
      "rating")

  @Volatile
  private var constructorRef: Constructor<Park>? = null

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Park").append(')') }

  public override fun fromJson(reader: JsonReader): Park {
    var id: String? = null
    var name: String? = null
    var description: String? = null
    var latitude: Double? = null
    var longitude: Double? = null
    var address: String? = null
    var facilities: List<String>? = null
    var images: List<String>? = null
    var openingHours: String? = null
    var rating: Float? = 0f
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> description = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("description", "description", reader)
        3 -> latitude = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("latitude",
            "latitude", reader)
        4 -> longitude = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("longitude",
            "longitude", reader)
        5 -> {
          address = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("address",
              "address", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          facilities = listOfStringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("facilities", "facilities", reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          images = listOfStringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("images",
              "images", reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        8 -> {
          openingHours = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("openingHours",
              "opening_hours", reader)
          // $mask = $mask and (1 shl 8).inv()
          mask0 = mask0 and 0xfffffeff.toInt()
        }
        9 -> {
          rating = floatAdapter.fromJson(reader) ?: throw Util.unexpectedNull("rating", "rating",
              reader)
          // $mask = $mask and (1 shl 9).inv()
          mask0 = mask0 and 0xfffffdff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffc1f.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  Park(
          id = id ?: throw Util.missingProperty("id", "id", reader),
          name = name ?: throw Util.missingProperty("name", "name", reader),
          description = description ?: throw Util.missingProperty("description", "description",
              reader),
          latitude = latitude ?: throw Util.missingProperty("latitude", "latitude", reader),
          longitude = longitude ?: throw Util.missingProperty("longitude", "longitude", reader),
          address = address as String,
          facilities = facilities as List<String>,
          images = images as List<String>,
          openingHours = openingHours as String,
          rating = rating as Float
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<Park> = this.constructorRef ?:
          Park::class.java.getDeclaredConstructor(String::class.java, String::class.java,
          String::class.java, Double::class.javaPrimitiveType, Double::class.javaPrimitiveType,
          String::class.java, List::class.java, List::class.java, String::class.java,
          Float::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          id ?: throw Util.missingProperty("id", "id", reader),
          name ?: throw Util.missingProperty("name", "name", reader),
          description ?: throw Util.missingProperty("description", "description", reader),
          latitude ?: throw Util.missingProperty("latitude", "latitude", reader),
          longitude ?: throw Util.missingProperty("longitude", "longitude", reader),
          address,
          facilities,
          images,
          openingHours,
          rating,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: Park?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("description")
    stringAdapter.toJson(writer, value_.description)
    writer.name("latitude")
    doubleAdapter.toJson(writer, value_.latitude)
    writer.name("longitude")
    doubleAdapter.toJson(writer, value_.longitude)
    writer.name("address")
    stringAdapter.toJson(writer, value_.address)
    writer.name("facilities")
    listOfStringAdapter.toJson(writer, value_.facilities)
    writer.name("images")
    listOfStringAdapter.toJson(writer, value_.images)
    writer.name("opening_hours")
    stringAdapter.toJson(writer, value_.openingHours)
    writer.name("rating")
    floatAdapter.toJson(writer, value_.rating)
    writer.endObject()
  }
}
